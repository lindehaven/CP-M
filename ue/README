
Micro Editor (ue)


Summary -----------------------------------------------------------------------

    Micro Editor (UE) enables easy editing of small source code files. Source
    code files are limited in size to fit into the transient program area (TPA)
    of CP/M.

    NOTE! If ^S is pressed repeatedly then screen output may pause. 
          Press ^Q once to unpause.


Command Line Options ----------------------------------------------------------

    UE can be started with a number of optional attribute values.

        UE.COM [filename [tabwidth [autoindent [rows [columns]]]]]

    Default values for optional attributes are:
    
        *   filename    = $$$$$$$$.$$$
        *   tabwidth    = 8
        *   autoindent  = 1 (on)
        *   rows        = 25
        *   columns     = 80

    Example: Filename = UE.C, tabwidth = 4, autoindent = 0 (off).
    
        UE.COM UE.C 4 0

    Example: Filename = NARROW.ASM, tabwidth = 2, autoindent = 1 (on),
             rows = 25, columns = 40.
             
        UE.COM NARROW.ASM 2 1 25 40


Files -------------------------------------------------------------------------

    When UE reads a file it discards all control characters except TAB (0x09)
    and LF (0x0a). When UE saves a file it adds a CR (0x0d) to each LF so that
    end of line is according to CP/M standard. Lines can be of arbitrary length
    but should, for the sake of reading and editing source code, be shortened
    to fit inside terminal screen borders.


Undo --------------------------------------------------------------------------

    All changes are placed in the undo buffer and can be reverted by pressing
    ^Z (Undo last insert/delete). In case the undo buffer becomes full it needs
    to be emptied by pressing ^Z (Undo last insert) or ^W (Write to file).


Search & Replace --------------------------------------------------------------

    A string can be searched incrementally by pressing ^L (Search string
    incrementally) and then typing the string to search for. If the search
    string is found then the cursor will move to the string in the edit buffer
    and display it in inverse video. If the search string is not found then the
    cursor will move to the beginning of the file. Pressing ^L again will
    search for the next occurrence of the search string.

    A string can be replaced by pressing ^N (Replace string) and then typing
    the new string. If the search string has been found then it will be
    possible to replace it with the new string. Pressing ^N again will replace
    the search string with the new string and search for the next occurrence of
    the search string. Pressing ^L again will search for the next occurrence of
    the search string without replacing it.

    Pressing ^[ (Escape), ^E (Cursor one row up), ^X (Cursor one row down),
    ^S (Cursor one column left) or ^D (Cursor one column right) exits the
    search/replace mode and returns to edit mode.


Syntax Highlighting -----------------------------------------------------------

    To give more help for programmers, LE can be linked with the Syntax
    Highlighter (SHL) module to highlight source code while editing.
    
    This feature has been tested in the YAZE-AG simulator running on different hardware platforms and operating systems with different performance:
        *   Intel i5 @ 2.6 GHz with Windows 10 runs with fair performance.
        *   Intel Celeron @ 1.7 GHz with Ubuntu 16 with lousy performance.
    A hardware platform with a Zilog Z80 or Intel Intel 8080 CPU running at a
    few MHz with CP/M will surely not be possible to run UE with SHL.


Screen layout -----------------------------------------------------------------

    In case lines are too long to be displayed in full then the rightmost
    column is marked with a '+' to indicate that there are more characters
    beyond the right screen border.

    The last row on the bottom of the screen is called the status row.
    It displays:
    
        *   Filename: filename
        *   U: undo buffer usage
        *   T: tabwidth
        *   C: current column
        *   R: current row / last row

    Example:
    
        Filename: $$$$$$$$.$$$                 U:000% T:8 C:009 R:00094/00463

    If an incremental string search is active then it is shown instead of the
    filename:
    
        *   Search for: <search string to look for>

    Example:
    
        Search for: while (*p++                U:009% T:4 C:021 R:00382/00463

    If an incremental string replacements is active then it is shown instead
    of the file name:
    
        *   Replace with: <new string to replace search string>

    Example:
    
        Replace with: while (*ptr++            U:009% T:4 C:021 R:00382/00463


Navigation Keys ---------------------------------------------------------------

    ^E      Cursor one row up.
    ^X      Cursor one row down.
    ^S      Cursor one column left.
    ^D      Cursor one column right.
    ^A      Cursor one word left.
    ^F      Cursor one word right.
    ^J      Cursor to beginning of line.
    ^K      Cursor to end of line.
    ^R      Cursor one page up.
    ^C      Cursor one page down.
    ^T      Cursor to beginning of file.
    ^V      Cursor to end of file.
    ^L      Search string incrementally. Looks for search string in the edit
            buffer and marks it with inverse video. Wraps when reached the end
            of the edit buffer.


Editing Keys ------------------------------------------------------------------

    ^N      Replace string. Replaces a search string with a new string.
    ^U      Change tabwidth. Can be 2-8 spaces.
    ^I      Insert tab (Tab).
    ^M      Insert new line (Enter).
    ^G      Delete character to the right (Delete).
    ^H      Delete character to the left (Backspace).
    ^Z      Undo last insert/delete.
    ^O      Cut to end of line. Moves text to paste buffer.
    ^P      Paste. Inserts all text from paste buffer.
    ^Y      Move line up.
    ^B      Move line down.


File Command Keys -------------------------------------------------------------

    ^W      Write to file. Saves the edit buffer to file with a carriage return
            '\r' and a new line '\n' as end of line. Empties the undo and paste
            buffers.
    ^Q      Quit. Exits the program if no changes have been made or the user
            does not want to save changes.


Internals ---------------------------------------------------------------------

    *   Digital Research CP/M systems
    *   ANSI terminal
    *   Aztec C Compiler, 8080 Assembler and C Linker Vers. 1.06D
        by Manx Software Systems
    *   Tested on YAZE-AG 2.40.2 by Frank D. Cringle, Michael Haardt
        and Andreas Gerlich.

    UE is small - less than 1000 lines of code and around 15 KB binary.

    UE is easy to adapt to your needs as a programmer - just edit and rebuild.
    *   Keyboard mapping is very much a personal preference and is therefore
        made easy to change.
    *   If you for some reason does not have an ANSI terminal then it should
        not be too difficult to adapt the source code to handle your terminal.
    *   The sizes of the edit, undo and paste buffers are limited to fit inside
        a Transient Program Area (TPA) of size 62 KB. Adjust with care as the
        program will not run if too much memory is statically allocated.


Change History ----------------------------------------------------------------

    1.27.0 Jan. 25, 2018. Lars Lindehaven
    *   Added syntax highlighting.

    1.26.5 Jan. 16, 2018. Lars Lindehaven
    *   Fixed bug with incorrect status row.

    1.26.4 Jan. 12, 2018. Lars Lindehaven
    *   Added function to autoindent lines.
    *   Improved function for cutting/pasting text so that more text can be
        cut/pasted and is also put in the undo buffer.
    *   Improved function for moving lines up/down so that they are also put
        in the undo buffer.
    *   Added command line options to change filename, tabwidth, autoindent,
        rows and columns.

    1.26.3 Jan. 10, 2018. Lars Lindehaven
    *   Reduced code redundancy and memory needs.

    1.26.2 Jan. 9, 2018. Lars Lindehaven
    *   Added function to replace a search string.

    1.26.1 Jan. 2, 2018. Lars Lindehaven
    *   Fixed column display during search.

    1.26.0 Dec. 28, 2017. Lars Lindehaven
    *   Ported to CP/M , Intel 8080 and Zilog Z80.
    *   Written keyPressed function in Intel 8080 assembly for CP/M.
    *   Made use of ANSI terminals' clear-to-end-of-line.
    *   Changed the search function.
    *   Lines longer than the screen width are visualized with '+'.
    *   Added the undo function.
    *   Added function to move a line up/down.
    *   Added function to cut/paste a line.
    *   Added status row at the bottom of the screen.

    1.25 Sept. 6, 2002. Terry Loveall
    *   Initial release 'OOPS' fix.
    *   Added 'Limitations' and 'Changes' sections, this file.
    *   Corrected 'compile with' command line, this file.
    *   Improved 'compile with' command line for size in ue.c and this
        file.
    *   Picked up a size optimization in function look().
    *   Fixed getch() to ignore PC function keys and to properly accept
        'paste' text from gpm or X terminal.
    *   Changed array 'key[]' from type short to char for reduced size.

    1.24 Sept. 5, 2002. Terry Loveall
    *   Initial release.

    1991. Anthony Howe.
    *   Initial release.


License -----------------------------------------------------------------------

    Public Domain 2017-2018 (C) by Lars Lindehaven.
    Public Domain 2002 (C) by Terry Loveall.
    Public Domain 1991 by Anthony Howe.  All rights released.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
